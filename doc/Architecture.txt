Application Architecture

Classes
-------

App: builds the application
Brush
FullStroke
Layer
LayerManager
PaletteColors
PaletteControl
StrokePlayer
StrokeRecorder
UserControl

MVC

Model: Brush, FullStroke, Layer
View: PaletteControl
Controller: App, LayerManager, PaletteControl, StrokePlayer, StrokeRecorder, UserControl

---

LayerManager: contains and manages all the StrokeLayers.

StrokeLayer: each layer has a collection of FullStrokes and an associated color palette.
StrokeRecorder: records a single full stroke
StrokePlayer: plays a collection of strokes in parallel (or in sequence)

	StrokeRecorder:
		StrokeLayer.add(x, y, paintState);
		StrokeLayer.emit("stroke-added", x, y, paintState);

	LayerManager.on("stroke-added", function(event) {	// clearReplayStrokes();
	  	StrokeRecorder.clearScreen();

	  	for each strokes in StrokeLayer[]:
	  		StrokePlayer.play(strokes);
	});

Input: StrokeRecorder (UserCanvas layer: user interactions)
Output: StrokePlayer (TrailCanvas layer: for replaying the trail animation)


Architectural decisions
-----------------------

 * Two Canvas layers
   We want to have two Canvas layers (i.e. UserCanvas and TrailCanvas), so that user input doesn't conflict with the animated drawing. (Don't want to share the same drawing context)

If while animating, there's more input (user drawing)
	-> queue the request until the animation is done and replay!

